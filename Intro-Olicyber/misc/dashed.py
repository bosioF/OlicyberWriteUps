import base64

hex_data
decoded_hex = ''.join([chr(int(h, 16)) for h in hex_data.split(',')])
print(decoded_hex)

binary_data = f"{decoded_hex}"
decoded_bin = ''.join([chr(int(binary_data[i:i+8], 2)) for i in range(0, len(binary_data), 8)])
print(decoded_bin)

encoded_data = f"{decoded_bin}"
decoded_base64 = base64.b64decode(encoded_data).decode('utf-8')
print(decoded_base64)

def cesare(testo, chiave):
    risultato = ""
    for carattere in testo:
        if carattere.isalpha():
            offset = 65 if carattere.isupper() else 97
            nuova_lettera = chr((ord(carattere) - offset + chiave) % 26 + offset)
            risultato += nuova_lettera
        else:
            risultato += carattere
    return risultato

testo_chiaro = f"{decoded_base64}"
chiave = 13
a = cesare(testo_chiaro, chiave)
print(a)
